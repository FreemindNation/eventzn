generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // Connection pooling URL
  directUrl = env("POSTGRES_URL_NON_POOLING") // Direct connection URL
}

model User {
  id          String         @id @default(cuid())
  name        String?
  email       String          @unique
  password    String?
  role        Role            @default(USER)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  image       String?         // Optional field for user profile image
  registrations Registration[]
  events      Event[]
  accounts    Account[]       // Relation to Account model
  sessions    Session[]       // Relation to Session model
}


model Event {
  id          String         @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String
  category    String
  imageUrl    String?         // Optional field for the event image URL
  isFree      Boolean         @default(false) // Indicates if the event is free
  ticketPrice Float?          // Price of the ticket (optional if isFree is true)
  registrations Registration[]
  createdAt   DateTime        @default(now())
  createdBy   String          // User ID of the admin who created the event

  createdByUser User          @relation(fields: [createdBy], references: [id])
}

model Registration {
  id          String         @id @default(cuid())
  userId      String
  eventId     String
  createdAt   DateTime       @default(now())

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // Prevent duplicate registrations
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Prevent duplicate accounts for the same provider
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token]) // Ensure unique email verification tokens
}



